/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Facturitaa;

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.util.HashSet;
import javax.swing.DefaultListModel;
import javax.swing.JTextField;

public class Principal extends javax.swing.JFrame {
    
    private DefaultListModel<String> modeloLista;

    public Principal() {
        initComponents();

        modeloLista = new DefaultListModel<>();
        ListaProductos.setModel(modeloLista);

        cargarProductosDesdeArchivo();
    }
    
    public ArrayList productosInventario = new ArrayList<>();

    public void cargarProductosDesdeArchivo() {
        String rutaArchivo = "C:\\Users\\ASUS\\Documents\\NetBeansProjects\\Factura\\src\\main\\java\\Facturitaa\\Inventario.txt";

        File archivo = new File(rutaArchivo);

        if (!archivo.exists()) {
            JOptionPane.showMessageDialog(null, "El archivo no se encontró en: " + rutaArchivo, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(":");
                if (partes.length >= 2) {
                    modeloLista.addElement(partes[0] + " | " + partes[1] + " | " + partes[2] + " | " + partes[3]); // Agrega el nombre del producto a la lista
                    productosInventario.add(partes[0] + "|" + partes[1] + "|" + partes[2] + "|" + partes[3]);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nombreUser = new javax.swing.JTextField();
        apellidoUser = new javax.swing.JTextField();
        cedulaUser = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaProductos = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        btnCompra1 = new javax.swing.JButton();
        btnCompra2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe Script", 1, 18)); // NOI18N
        jLabel1.setText("TIENDA");

        jLabel2.setText("Nombre:");

        jLabel3.setText("Apellido:");

        jLabel4.setText("Cedula:");

        nombreUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nombreUser))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cedulaUser, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(apellidoUser, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(apellidoUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cedulaUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ListaProductos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "DP001 - Dragon Pharma - 30.00 - 100", "GS002 - Sebas Strong - 25.00 - 100", "PP003 - Pepe's Muscle - 40.00 - 100", "JS004 - Java's ++ - 35.00 - 100", "ML005 - Mamalong - 27.00 - 100" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ListaProductos);

        jLabel5.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel5.setText("Productos");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        btnCompra1.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        btnCompra1.setText("Realizar Compra");
        btnCompra1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompra1ActionPerformed(evt);
            }
        });

        btnCompra2.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        btnCompra2.setText("Añadir Producto");
        btnCompra2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompra2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(283, 283, 283))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(btnCompra1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnCompra2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCompra1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCompra2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nombreUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreUserActionPerformed

    private void btnCompra1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompra1ActionPerformed
        
        String nombre = nombreUser.getText().trim();
        String apellido = apellidoUser.getText().trim();
        String cedula = cedulaUser.getText().trim();

        // Validación de campos vacíos
        if (nombre.isEmpty() || apellido.isEmpty() || cedula.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos antes de continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validación de nombre y apellido (solo letras y espacios)
        if (!nombre.matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+") || !apellido.matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+")) {
            JOptionPane.showMessageDialog(null, "El nombre y apellido solo deben contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validación de cédula (exactamente 10 dígitos)
        if (!cedula.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "La cédula debe contener exactamente 10 dígitos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Llamar a la función para agregar productos
        agregarProductos(nombre, apellido, cedula);
        
    }//GEN-LAST:event_btnCompra1ActionPerformed

    private void agregarProductos(String nombre, String apellido, String cedula) {
        ArrayList<String> listaProductos = new ArrayList<>();
        HashSet<String> productosSeleccionados = new HashSet<>();
        float precioTotal = 0;

        while (true) {
            String codigoProducto = JOptionPane.showInputDialog(null, "Ingrese el código del producto:", "Código del Producto", JOptionPane.QUESTION_MESSAGE);
            if (codigoProducto == null || codigoProducto.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Código inválido.", "Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }

            // Evita la selección repetida de productos
            if (!productosSeleccionados.add(codigoProducto)) {
                JOptionPane.showMessageDialog(null, "Este producto ya ha sido seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }

            // Buscar el producto en la lista
            String productoEncontrado = null;
            for (int i = 0; i < modeloLista.getSize(); i++) {
                String item = modeloLista.getElementAt(i);
                if (item.startsWith(codigoProducto + " |")) {
                    productoEncontrado = item;
                    break;
                }
            }

            if (productoEncontrado == null) {
                JOptionPane.showMessageDialog(null, "Producto no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }

            String[] datos = productoEncontrado.split(" \\| ");
            try {
                Producto producto = new Producto(datos[0], datos[1], Float.parseFloat(datos[2].trim()), Integer.parseInt(datos[3].trim()));

                // Solicitar cantidad del producto
                int cantidad = obtenerCantidadValida(producto);
                if (cantidad == -1) {
                    productosSeleccionados.remove(codigoProducto);
                    continue;
                }

                producto.setCantidad(cantidad);
                listaProductos.add(producto.getCodigo() + ":" + producto.getNombre() + ":" + producto.getPrecio() + ":" + cantidad);
                precioTotal += producto.getPrecio() * cantidad;

                // Confirmación de agregar más productos
                int respuesta = JOptionPane.showConfirmDialog(null, "¿Desea agregar otro producto?", "Confirmar compra", JOptionPane.YES_NO_OPTION);
                if (respuesta == JOptionPane.NO_OPTION) {
                    break;
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Error al procesar los datos del producto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        if (!listaProductos.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Compra finalizada. Generando factura...");
            generarFactura(listaProductos, nombre, apellido, cedula);
        } else {
            JOptionPane.showMessageDialog(null, "No se han agregado productos a la compra.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private int obtenerCantidadValida(Producto producto) {
        while (true) {
            String cantidadStr = JOptionPane.showInputDialog(null, "¿Cuántos productos deseas comprar?", "Cantidad", JOptionPane.QUESTION_MESSAGE);

            if (cantidadStr == null || cantidadStr.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Cantidad no válida.", "Error", JOptionPane.ERROR_MESSAGE);
                return -1;
            }

            try {
                int cantidad = Integer.parseInt(cantidadStr.trim());
                if (cantidad > 0 && cantidad <= producto.getCantidad()) {
                    return cantidad;
                } else {
                    JOptionPane.showMessageDialog(null, "Cantidad inválida o fuera de stock.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Debe ingresar un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnCompra2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompra2ActionPerformed
        JTextField idField = new JTextField();
        JTextField nombreField = new JTextField();
        JTextField precioField = new JTextField();
        JTextField cantidadField = new JTextField();

        Object[] mensaje = {
            "ID del producto:", idField,
            "Nombre:", nombreField,
            "Precio:", precioField,
            "Cantidad:", cantidadField
        };

        int opcion = JOptionPane.showConfirmDialog(this, mensaje, "Nuevo Producto", JOptionPane.OK_CANCEL_OPTION);

        if (opcion == JOptionPane.OK_OPTION) {
            String id = idField.getText().trim();
            String nombre = nombreField.getText().trim();
            String precio = precioField.getText().trim();
            String cantidad = cantidadField.getText().trim();

            if (!id.isEmpty() && !nombre.isEmpty() && !precio.isEmpty() && !cantidad.isEmpty()) {
                agregarProducto(id, nombre, precio, cantidad);
            } else {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCompra2ActionPerformed
      
    public static void generarFactura(ArrayList<String> venta, String nombreUsuario, String apellidoUsuario, String cedulaUsuario) {
        float precioSub = 0;
        final float IVA = 0.15f; // 15% de IVA
        final float DESCUENTO = 0.0f; // Puedes modificarlo si hay descuentos

        StringBuilder factura = new StringBuilder();
        DecimalFormat df = new DecimalFormat("#0.00");

        String fecha = LocalDate.now().toString();

        factura.append("==========================================================\n");
        factura.append("                          FACTURA                         \n");
        factura.append("                      --- Tienda ---                     \n");
        factura.append("==========================================================\n");
        factura.append(String.format("R.U.C.: %-35s\n", "1790112233001"));
        factura.append(String.format("FACTURA NO.: %-30s\n", "002-001-123456789"));
        factura.append(String.format("AUT. SRI: %-31s\n", "1234567890"));
        factura.append("----------------------------------------------------------\n");

        factura.append(String.format("Sr(es): %-30s\n", nombreUsuario + " " + apellidoUsuario));
        factura.append(String.format("R.U.C./C.I.: %-30s\n", cedulaUsuario));
        factura.append(String.format("Fecha Emisión: %-25s\n", fecha));
        factura.append("----------------------------------------------------------\n");

        factura.append(String.format("%-5s %-20s %-12s %-12s\n", "Cant", "Producto", "P. Unitario", "V. Total"));
        factura.append("----------------------------------------------------------\n");

        for (String item : venta) {
            String[] detalles = item.split(":");
            if (detalles.length < 4) continue; // Validación para evitar errores

            int cantidad = Integer.parseInt(detalles[3].trim());
            String nombre = detalles[1].trim();
            float precio = Float.parseFloat(detalles[2].trim());
            float totalProducto = precio * cantidad;

            precioSub += totalProducto;

            factura.append(String.format("%-5d %-20s %-12s %-12s\n",
                    cantidad, nombre, df.format(precio), df.format(totalProducto)));
        }

        float ivaCalculado = precioSub * IVA;
        float subtotalSinImpuestos = precioSub - (precioSub * DESCUENTO);
        float totalPagar = subtotalSinImpuestos + ivaCalculado;

        factura.append("----------------------------------------------------------\n");
        factura.append(String.format("%-30s: %s\n", "Subtotal 15% IVA", df.format(ivaCalculado)));
        factura.append(String.format("%-30s: %s\n", "Subtotal sin impuestos", df.format(subtotalSinImpuestos)));
        factura.append("----------------------------------------------------------\n");
        factura.append(String.format("%-30s: %s\n", "Total", df.format(totalPagar)));
        factura.append("==========================================================\n");

        JOptionPane.showMessageDialog(null, factura.toString(), "Factura", JOptionPane.INFORMATION_MESSAGE);

        venta.clear();
    }
    
    public static ArrayList<String> venta = new ArrayList<>();
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
                
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    
    public void agregarProducto(String id, String nombre, String precio, String cantidad) {
        String nuevoProducto = id + ":" + nombre + ":" + precio + ":" + cantidad;
        String rutaArchivo = "C:\\Users\\ASUS\\Documents\\NetBeansProjects\\Factura\\src\\main\\java\\Facturitaa\\Inventario.txt";

        try {
            // Verificar que modeloLista y productosInventario no sean nulos
            if (modeloLista == null) {
                JOptionPane.showMessageDialog(null, "Error: modeloLista no ha sido inicializado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (productosInventario == null) {
                JOptionPane.showMessageDialog(null, "Error: productosInventario no ha sido inicializado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Agregar a la lista gráfica
            modeloLista.addElement(id + " | " + nombre + " | " + precio + " | " + cantidad);
            productosInventario.add(nuevoProducto);

            // Verificar si el archivo existe y si se puede escribir
            File archivo = new File(rutaArchivo);
            if (!archivo.exists()) {
                archivo.createNewFile(); // Crear el archivo si no existe
            }

            // Escribir en el archivo
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo, true))) {
                bw.write(nuevoProducto);
                bw.newLine();
            }

            JOptionPane.showMessageDialog(null, "Producto agregado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el producto: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListaProductos;
    private javax.swing.JTextField apellidoUser;
    private javax.swing.JButton btnCompra1;
    private javax.swing.JButton btnCompra2;
    private javax.swing.JTextField cedulaUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreUser;
    // End of variables declaration//GEN-END:variables
}
